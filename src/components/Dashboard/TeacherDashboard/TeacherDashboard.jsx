import React, { useState, useEffect } from 'react';
import styles from './TeacherDashboard.module.css';
import { FiPlus } from 'react-icons/fi';
import Modal from '../../Modal/Modal';
import EvaluationRow from './EvaluationRow';
import AssignmentItem from './AssignmentItem';
import GroupStatistics from '../Statistics/GroupStatistics';
import API from '../../../api';

const TeacherDashboard = () => {
    const teacherName = localStorage.getItem('userName') || 'Teacher';
    const token = localStorage.getItem('userToken');

    const [lessons, setLessons] = useState([]);
    const [groups, setGroups] = useState([]);
    const [evaluationData, setEvaluationData] = useState([]);
    const [isLoadingEvaluations, setIsLoadingEvaluations] = useState(false);
    const [isDetailLoading, setIsDetailLoading] = useState(false); // --- –î–û–ë–ê–í–õ–ï–ù–û: State –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
    const [newLessonTitle, setNewLessonTitle] = useState('');
    const [newLessonDueDate, setNewLessonDueDate] = useState('');
    const [selectedGroupId, setSelectedGroupId] = useState('');
    const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
    const [selectedLesson, setSelectedLesson] = useState(null);
    const [newAssignmentTitle, setNewAssignmentTitle] = useState('');
    const [newAssignmentDescription, setNewAssignmentDescription] = useState('');
    const [activeTab, setActiveTab] = useState('assignments');
    const [mainTab, setMainTab] = useState('lessons');

    const fetchData = async () => {
        try {
            const [lessonsRes, groupsRes] = await Promise.all([
                API.get('/api/lessons'),
                API.get('/api/groups')
            ]);
            setLessons(lessonsRes.data);
            setGroups(groupsRes.data);
        } catch (error) { console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error); }
    };

    useEffect(() => {
        if (token) fetchData();
    }, [token]);

    const handleOpenCreateModal = () => {
        setNewLessonTitle('');
        setNewLessonDueDate('');
        if (groups.length > 0) {
            setSelectedGroupId(groups[0]._id);
        } else {
            setSelectedGroupId('');
        }
        setIsCreateModalOpen(true);
    };

    const handleCreateLesson = async (event) => {
        event.preventDefault();
        if (!selectedGroupId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.');
            return;
        }
        try {
            await API.post('/api/lessons', {
                title: newLessonTitle,
                dueDate: newLessonDueDate,
                groupId: selectedGroupId
            });
            alert('–£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω!');
            setIsCreateModalOpen(false);
            fetchData();
        } catch (error) {
            alert(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞');
        }
    };

    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∫–µ ---
    const handleOpenDetailModal = async (lesson) => {
        setIsDetailModalOpen(true);
        setIsDetailLoading(true);
        setActiveTab('assignments');
        setSelectedLesson(null);

        try {
            const response = await API.get(`/api/lessons/${lesson._id}`);
            setSelectedLesson(response.data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É—Ä–æ–∫–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞.");
            setIsDetailModalOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        } finally {
            setIsDetailLoading(false);
        }
    };

    // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const handleCloseDetailModal = () => {
        setIsDetailModalOpen(false);
        setSelectedLesson(null);
        setEvaluationData([]);
        setNewAssignmentTitle('');
        setNewAssignmentDescription('');
        fetchData();
    };

    const handleAddAssignment = async (e) => {
        e.preventDefault();
        if (!selectedLesson) return;
        try {
            const res = await API.post(`/api/lessons/${selectedLesson._id}/assignments`, {
                title: newAssignmentTitle,
                description: newAssignmentDescription
            });
            setSelectedLesson(res.data); // –û–±–Ω–æ–≤–ª—è–µ–º state –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            setNewAssignmentTitle('');
            setNewAssignmentDescription('');
            alert('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
        } catch (error) {
            alert(error.response?.data?.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
        }
    };

    const handleDeleteAssignment = async (assignmentId) => {
        if (!selectedLesson || !window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')) return;
        try {
            const res = await API.delete(`/api/lessons/${selectedLesson._id}/assignments/${assignmentId}`);
            setSelectedLesson(res.data); // –û–±–Ω–æ–≤–ª—è–µ–º state
            alert('–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.');
        } catch (error) {
            alert(error.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    };

    useEffect(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–∫ –∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–û—Ü–µ–Ω–∫–∏"
        if (activeTab === 'evaluations' && selectedLesson?._id) {
            const fetchEvaluations = async () => {
                setIsLoadingEvaluations(true);
                try {
                    const res = await API.get(`/api/evaluations/${selectedLesson._id}`);
                    setEvaluationData(res.data);
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫:", error);
                } finally {
                    setIsLoadingEvaluations(false);
                }
            };
            fetchEvaluations();
        }
    }, [activeTab, selectedLesson]);

    const handleUpdateEvaluationInState = (studentId, savedEvaluation) => { setEvaluationData(prev => prev.map(data => data.student._id === studentId ? { ...data, evaluation: savedEvaluation, isNew: false } : data)); };

    return (
        <>
            <div className={styles.dashboard}>
                <header className={styles.header}>
                    <div><h3>Hello, {teacherName}!</h3><p>Here are your lessons and student progress.</p></div>
                    <button className={styles.createButton} onClick={handleOpenCreateModal}><FiPlus /> Create Lesson</button>
                </header>
                <div className={styles.mainTabContainer}>
                    <button onClick={() => setMainTab('lessons')} className={mainTab === 'lessons' ? styles.activeMainTab : styles.mainTab}>–£—Ä–æ–∫–∏</button>
                    <button onClick={() => setMainTab('statistics')} className={mainTab === 'statistics' ? styles.activeMainTab : styles.mainTab}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã</button>
                </div>
                {mainTab === 'lessons' && (
                    <div className={styles.lessonList}>
                        <div className={`${styles.lessonRow} ${styles.headerRow}`}><span>Lesson</span><span>Group</span><span>Actions</span></div>
                        {lessons.map(lesson => (
                            <div className={styles.lessonRow} key={lesson._id}>
                                <span>{lesson.title}</span>
                                <span className={styles.groupName}>{lesson.group?.name || 'N/A'}</span>
                                <button onClick={() => handleOpenDetailModal(lesson)} className={styles.gradeButton}>–£–ø—Ä–∞–≤–ª—è—Ç—å</button>
                            </div>
                        ))}
                    </div>
                )}
                {mainTab === 'statistics' && <GroupStatistics groups={groups} />}
            </div>

            <Modal isOpen={isCreateModalOpen} onRequestClose={() => setIsCreateModalOpen(false)} title="Create New Lesson" modalClassName={styles.defaultModal}>
                 <form onSubmit={handleCreateLesson} className={styles.createLessonForm}>
                    <div className={styles.formGroup}><label htmlFor="groupSelect">Group</label><select id="groupSelect" value={selectedGroupId} onChange={(e) => setSelectedGroupId(e.target.value)} required><option value="" disabled>Select a group</option>{groups.map(group => (<option key={group._id} value={group._id}>{group.name}</option>))}</select></div>
                    <div className={styles.formGroup}><label htmlFor="lessonTitle">Lesson Title</label><input type="text" id="lessonTitle" value={newLessonTitle} onChange={(e) => setNewLessonTitle(e.target.value)} required /></div>
                    <div className={styles.formGroup}><label htmlFor="dueDate">Due Date</label><input type="date" id="dueDate" value={newLessonDueDate} onChange={(e) => setNewLessonDueDate(e.target.value)} /></div>
                    <div className={styles.formActions}><button type="button" className={styles.cancelButton} onClick={() => setIsCreateModalOpen(false)}>Cancel</button><button type="submit" className={styles.submitButton}>Create Lesson</button></div>
                </form>
            </Modal>
            
            <Modal 
                isOpen={isDetailModalOpen} 
                onRequestClose={handleCloseDetailModal} 
                title={`–£—Ä–æ–∫: ${selectedLesson?.title || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`}
                modalClassName={activeTab === 'evaluations' ? styles.wideModal : styles.defaultModal}
            >
                {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É --- */}
                {isDetailLoading ? (<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞...</p>) : selectedLesson && (
                    <>
                        <div className={styles.tabContainer}>
                            <button onClick={() => setActiveTab('assignments')} className={activeTab === 'assignments' ? styles.activeTab : styles.tab}>–ó–∞–¥–∞–Ω–∏—è</button>
                            <button onClick={() => setActiveTab('evaluations')} className={activeTab === 'evaluations' ? styles.activeTab : styles.tab}>–û—Ü–µ–Ω–∫–∏</button>
                        </div>
                        <div className={styles.tabContent}>
                            {activeTab === 'assignments' && (
                                <div>
                                    <h4>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è</h4>
                                    <div className={styles.assignmentList}>
                                        {selectedLesson?.assignments?.length > 0 ? (
                                            selectedLesson.assignments.map((assign) => (
                                                <AssignmentItem key={assign._id} assignment={assign} lessonId={selectedLesson._id} onUpdate={setSelectedLesson} onDelete={() => handleDeleteAssignment(assign._id)} />
                                            ))
                                        ) : (<p>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.</p>)}
                                    </div>
                                    <hr className={styles.divider}/>
                                    <h4>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h4>
                                    <form onSubmit={handleAddAssignment} className={styles.addAssignmentForm}>
                                        <div className={styles.formGroup}><label>–ù–∞–∑–≤–∞–Ω–∏–µ</label><input type="text" value={newAssignmentTitle} onChange={(e) => setNewAssignmentTitle(e.target.value)} required /></div>
                                        <div className={styles.formGroup}><label>–û–ø–∏—Å–∞–Ω–∏–µ</label><textarea value={newAssignmentDescription} onChange={(e) => setNewAssignmentDescription(e.target.value)}></textarea></div>
                                        <div className={styles.formActions}><button type="submit" className={styles.submitButton}>–î–æ–±–∞–≤–∏—Ç—å</button></div>
                                    </form>
                                </div>
                            )}

                            {activeTab === 'evaluations' && (
                                <div>
                                    {!selectedLesson?.assignments?.length ? (<p>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏—è...</p>) : (
                                        <>
                                            <div className={`${styles.evaluationRow} ${styles.evaluationHeader}`}><span>–£—á–µ–Ω–∏–∫</span><span>–û—Ü–µ–Ω–∫–∞ (%)</span><span>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</span><span>–î–µ–π—Å—Ç–≤–∏–µ</span></div>
                                            <div className={styles.evaluationContainer}>
                                                {isLoadingEvaluations ? <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p> : (evaluationData.map(data => (<EvaluationRow key={data.student._id} studentData={data} lessonId={selectedLesson._id} onSave={handleUpdateEvaluationInState} />)))}
                                            </div>
                                        </>
                                    )}
                                </div>
                            )}
                        </div>
                    </>
                )}
            </Modal>
        </>
    );
};

export default TeacherDashboard;