import React, { useState, useEffect } from 'react';
import styles from './StudentDashboard.module.css';
import { FiClipboard, FiStar, FiMessageSquare, FiCheckCircle, FiXCircle } from 'react-icons/fi';
import CourseCard from '../../CourseCard/CourseCard.jsx';
import Modal from '../../Modal/Modal';
import StudentStatistics from '../Statistics/StudentStatistics';
import API from '../../../api';

const StudentDashboard = () => {
    const userName = localStorage.getItem('userName') || 'Student';
    const token = localStorage.getItem('userToken');

    const [lessons, setLessons] = useState([]);
    const [isLoadingLessons, setIsLoadingLessons] = useState(true);
    const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
    const [selectedLesson, setSelectedLesson] = useState(null);
    const [evaluation, setEvaluation] = useState(null);
    const [isLoadingEvaluation, setIsLoadingEvaluation] = useState(false);
    const [stats, setStats] = useState(null);
    const [statsLoading, setStatsLoading] = useState(true);
    const [statsError, setStatsError] = useState('');

    useEffect(() => {
        const fetchLessons = async () => {
            if (!token) { setIsLoadingLessons(false); return; }
            try {
                const response = await API.get('/api/lessons');
                setLessons(response.data);
            } catch (error) { console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤:", error); } 
            finally { setIsLoadingLessons(false); }
        };
        const fetchStats = async () => {
            if (!token) { setStatsError('–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'); setStatsLoading(false); return; }
            try {
                const res = await API.get('/api/stats/student');
                setStats(res.data);
            } catch (err) { setStatsError(err.response?.data?.message || err.message); } 
            finally { setStatsLoading(false); }
        };
        
        fetchLessons();
        fetchStats();
    }, [token]);
    
    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
    const handleOpenDetailModal = async (lesson) => {
        setIsDetailModalOpen(true);
        setIsLoadingEvaluation(true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç state –¥–ª—è –æ–±—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        setSelectedLesson(null);      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        setEvaluation(null);

        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const [lessonResponse, evaluationResponse] = await Promise.all([
                API.get(`/api/lessons/${lesson._id}`), // 1. –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
                API.get(`/api/evaluations/student/${lesson._id}`).catch(err => {
                    // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404), —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
                    if (err.response?.status === 404) return null;
                    throw err; // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                })
            ]);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ state
            setSelectedLesson(lessonResponse.data);
            if (evaluationResponse) {
                setEvaluation(evaluationResponse.data);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É—Ä–æ–∫–∞:', error);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        } finally {
            setIsLoadingEvaluation(false);
        }
    };
    
    const handleCloseDetailModal = () => {
        setIsDetailModalOpen(false);
        setSelectedLesson(null);
        setEvaluation(null);
    };

    const averageGrade = stats?.rating?.myRank?.averageGrade;

    return (
        <>
            <main className={styles.dashboard}>
                <header className={styles.header}>
                    <h1 className={styles.title}>
                        Hello, <span>{userName}!</span> üëã
                    </h1>
                    <p className={styles.subtitle}>Let's learn something new today!</p>
                </header>

                <div className={styles.promoBanner}>
                    <div className={styles.promoContent}>
                        {averageGrade !== undefined ? (<h2>Your average score is: {averageGrade}%</h2>) : (<h2>Complete your first lesson to see your score!</h2>)}
                        <div className={styles.goalProgressContainer}><div className={styles.goalProgressBar} style={{width: `${averageGrade || 0}%`}}></div></div>
                    </div>
                    <div className={styles.promoIcon}>üéØ</div>
                </div>
                <section className={styles.section}>
                    <div className={styles.sectionHeader}><h3>My Lessons</h3><a href="#">All Lessons</a></div>
                    <div className={styles.coursesGrid}>
                        {isLoadingLessons ? (<p>Loading lessons...</p>) : lessons.length > 0 ? (lessons.map(lesson => (<CourseCard key={lesson._id} lesson={lesson} onClick={() => handleOpenDetailModal(lesson)} />))) : (<p>–í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —É—Ä–æ–∫–æ–≤.</p>)}
                    </div>
                </section>
                <section className={styles.section}>
                    <div className={styles.sectionHeader}><h3>My Progress & Rating</h3></div>
                    <StudentStatistics stats={stats} loading={statsLoading} error={statsError} />
                </section>
            </main>

            <Modal isOpen={isDetailModalOpen} onRequestClose={handleCloseDetailModal} title={`–£—Ä–æ–∫: ${selectedLesson?.title || ''}`}>
                {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ --- */}
                {isLoadingEvaluation ? (<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞...</p>) : selectedLesson && (
                    <div className={styles.studentModalContainer}>
                        <div className={styles.assignmentsSection}>
                            <h4><FiClipboard /> –ó–∞–¥–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É:</h4>
                            {/* –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç.–∫. selectedLesson —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è */}
                            {selectedLesson.assignments && selectedLesson.assignments.length > 0 ? (
                                <div className={styles.assignmentList}>
                                    {selectedLesson.assignments.map(assign => {
                                        // evaluation?.skills - –º–∞—Å—Å–∏–≤ ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                                        const isCompleted = evaluation?.skills?.includes(assign._id);
                                        return (
                                            <div key={assign._id} className={styles.assignmentItem}>
                                                <div className={styles.assignmentDetails}>
                                                    <strong>{assign.title}</strong>
                                                    <p>{assign.description}</p>
                                                </div>
                                                {/* –ò–∫–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ */}
                                                {evaluation && (
                                                    isCompleted ? (
                                                        <FiCheckCircle className={styles.completedIcon} title="–í—ã–ø–æ–ª–Ω–µ–Ω–æ" />
                                                    ) : (
                                                        <FiXCircle className={styles.notCompletedIcon} title="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" />
                                                    )
                                                )}
                                            </div>
                                        );
                                    })}
                                </div>
                            ) : (
                                <p>–ö —ç—Ç–æ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.</p>
                            )}
                        </div>
                        
                        <hr className={styles.divider} />

                        <div>
                            <h4><FiStar /> –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:</h4>
                            {evaluation ? (
                                <div className={styles.evaluationBox}>
                                    <div className={styles.grade}>
                                        <strong>–û—Ü–µ–Ω–∫–∞:</strong> {evaluation.grade}%
                                    </div>
                                    {evaluation.feedback && (
                                       <div className={styles.feedbackResult}>
                                           <h4><FiMessageSquare/> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {evaluation.teacher?.name || '—É—á–∏—Ç–µ–ª—è'}:</h4>
                                           <p>{evaluation.feedback}</p>
                                       </div>
                                    )}
                                </div>
                            ) : (
                                <p>–û—Ü–µ–Ω–∫–∞ –µ—â–µ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞.</p>
                            )}
                        </div>
                    </div>
                )}
            </Modal>
        </>
    );
};

export default StudentDashboard;